swagger: '2.0'
info:
  description: >
    The VAS Management API is a REST API which has predictable, resource-oriented URLs and uses other HTTP features such as HTTP verbs for each operation,HTTP authentication and HTTP status information to indicate API success or errors.
    
    The picture below shows the relationship between the entities and the main resources.
    
    1. **Service Provider** - The Service Provider is responsible for providing the service for the user.
    
    
    2. **Channel Provider** - The Channel Provider is resposible for a subscription channel and is responsible for selling the service from the service prodiver. Once a user subscribes a service through a channel the service provider will be notified about that event.
    
    
    3. **Subscription** - Handles all the operations regarding a Subscription, such as create, delete or update a subscription.
    
    
    4. **Micro Billing** - Handles new Micro Billing requests.
    
    
    5. **Messaging** - Allow Service Providers to sendo Mobile Terminated messages.
    
    6. **Web Hooks** - The platform send notifications (also known as *Data Syncs*) to the service providers. Those notifications contains information about the event that happened in the platform such as a subription in a service that belogns to the service provider.
    

        +-------------------------------------------------------------------------------------------------+
        |                                                                                                 |
        |    +----------------+        +----------------+                                                 |
        |    |Channel Provider|        |Service Provider+<-----------------------------------+            |
        |    +-------+--------+        +--------+-------+                                    |            |
        |            |                          |                                            |            |
        |            |   +----------------------------------------------+                    |            |
        |            |   |                      |                       |                    |            |
        |            v   v                      v                       v                    |            |
        |   +--------+---+---+       +----------+------+       +--------+----+      +--------+-------+    |
        |   |  Subscription  |       |  Micro Billing  |       |  Messaging  |      |   Web Hooks    |    |
        |   +----------------+       +-----------------+       +-------------+      +----------------+    |
        |                                                                                                 |
        +-------------------------------------------------------------------------------------------------+


  version: 1.0.0
  title: VAS Management API
  x-logo:
      url: "http://hgnunes.github.io/Logo.png"
  contact:
    email: contact@mobicare.com.br
host: sdp.mobicare.com.br
basePath: /v1
schemes:
  - https
consumes:
  - application/json
produces:
  - application/json
securityDefinitions:
  Bearer:
    type: apiKey
    description: >
      The clients of the API need to authenticate each request by including a key in every API request. The API keys are available in the Management Console
      
      The API uses JWT together with HTTP Bearer Authentication to authenticate a service or a channel provider. The JWT token carry priviledges for the provider and should not be pubicly shared.

    name: Authorization
    in: header

# tags are used for organizing operations
tags:
- name: channel providers
  description: Operations available to channel providers
- name: service providers
  description: Operations available to service providers
- name: notification
  description: Notifications sent to the service providers
- name: internal services
  description: Operations available to internal services
  
paths:
  /subscription:
    get:
      tags:
      - service providers
      summary: List subscriptions
      operationId: searchSubscription
      description: Retrieve a list of subscriptions for a given User ID. A Service ID might be also informed as a filter.
      produces:
      - application/json
      parameters:
      - in: query
        name: userId
        type: string
        required: true
        description: User ID of the subscriptions to retrieve 
      - in: query
        name: serviceId
        type: integer
        required: false
        description: Service ID of the subscriptions to retrieve
      responses:
        200:
          description: returns a list of subscriptions
          schema:
            $ref: '#/definitions/SubscriptionItemArray'
        400:
          description: invalid input, object invalid
        401:
          description: invalid or expired user credentials
        403:
          description: service does not belong to the service provider
        409:
          description: user is already subscribed to the provider's service
        500:
          description: unkown error
        503:
          description: number of transactions per second exceed
    post:
      tags:
      - channel providers
      - service providers
      summary: Create a subscription
      operationId: addSubscription
      description: Cretes a new subscription for a given User ID on a given Offer ID
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: subscriptionItem
        description: Subscription item to add
        schema:
          $ref: '#/definitions/SubscriptionCreateItem'
      responses:
        202:
          description: subscription request accepted, a callback will be sent to the provider after processing it
        400:
          description: invalid input, object invalid
        401:
          description: invalid or expired user credentials
        403:
          description: service does not belong to the service provider
        409:
          description: user is already subscribed to the provider's service
        500:
          description: unkown error
        503:
          description: number of transactions per second exceed
  /subscription/{subscriptionId}:
    put:
      tags:
      - internal services
      summary: updates an subscription after successfully charging the user
      operationId: updateSubscription
      description: Updates an existing subscription
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - name: subscriptionId
        in: path
        description: Subscription Id
        required: true
        type: integer
      - in: body
        name: subscriptionItem
        description: Subscription item to add
        schema:
          $ref: '#/definitions/SubscriptionRenewItem'
      responses:
        202:
          description: subscription request accepted, a callback will be sent to the provider after processing it
        400:
          description: invalid input, object invalid
        401:
          description: invalid or expired user credentials
        403:
          description: service does not belong to the service provider
        409:
          description: user is not subscribed to the service
        500:
          description: unkown error
        503:
          description: number of transactions per second exceed
  /subscription/cancel/{subscriptionId}:
    post:
      tags:
      - channel providers
      summary: Cancel a subscription
      operationId: cancelSubscription
      description: Cancel an existing subscription. The subscription is terminated immediately and the user will not be charged again for the subscription.
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - name: subscriptionId
        in: path
        description: Subscription Id
        required: true
        type: integer
      - in: body
        name: subscriptionItem
        description: Subscription item to add
        schema:
          $ref: '#/definitions/SubscriptionCancelItem'
      responses:
        202:
          description: subscription request accepted, a callback will be sent to the provider after processing it
        400:
          description: invalid input, object invalid
        401:
          description: invalid or expired user credentials
        403:
          description: service does not belong to the service provider
        409:
          description: user is not subscribed to the service
        500:
          description: unkown error
        503:
          description: number of transactions per second exceed
  /microbilling:
    post:
      tags:
      - service providers
      summary: Charges users for one-time purchases.
      operationId: microBilling
      description: Charges users for one-time purchases. The access to this operation is limited to a few service providers who have special requirements for charging outside the context of the recurring billing. 
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: billingItem
        description: Information for the one time charge.
        schema:
          $ref: '#/definitions/BillingItem'
      responses:
        200:
          description: user was succesfully charged
        400:
          description: invalid input, object invalid
        401:
          description: invalid or expired  credentials
        402:
          description: user does not have enough balance
        403:
          description: service does not belong to the service provider
        500:
          description: unkown error
        503:
          description: number of transactions per second exceed
  /notification/{subscriptionId}:
    post:
      tags:
      - notification
      summary: Notify the service provider about an event
      operationId: notifyEvent
      description: Every time  subscription changes its state a notification is sent to the service provider
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - name: subscriptionId
        in: path
        description: Subscription Id
        required: true
        type: integer
      - in: body
        name: notificationItem
        description: Notification containing the information about an event regarding the subscription
        schema:
          $ref: '#/definitions/NotificationItem'
      responses:
        200:
          description: service provider succesfully processed the notification
        400:
          description: invalid input, object invalid
        401:
          description: invalid or expired  credentials
        403:
          description: service does not belong to the service provider
        500:
          description: unkown error
        503:
          description: number of transactions per second exceed
  /messaging/mt:
    post:
      tags:
      - service providers
      summary: Receive a mobile terminated message request
      operationId: mtReceive
      description: API for service providers to request a Mobile Terminated message do be sent
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: moItem
        description: Notification containing the information about a mobile terminated message
        schema:
          $ref: '#/definitions/MtItem'
      responses:
        200:
          description: succesfully processed the notification
        400:
          description: invalid input, object invalid
        401:
          description: invalid or expired  credentials
        403:
          description: service does not belong to the service provider
        500:
          description: unkown error
        503:
          description: number of transactions per second exceed
  /messaging/mo:
    post:
      tags:
      - notification
      summary: Notify the service provider about a mobile originated message
      operationId: moReceive
      description: Notification sent every time a mobile originated message is sent to the service provider (excluding messages intercepted by the SDP platform)
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: moItem
        description: Notification containing the information about a mobile originated message
        schema:
          $ref: '#/definitions/MoItem'
      responses:
        200:
          description: service provider succesfully processed the notification
        400:
          description: invalid input, object invalid
        401:
          description: invalid or expired  credentials
        403:
          description: service does not belong to the service provider
        500:
          description: unkown error
        503:
          description: number of transactions per second exceed
definitions:
  SubscriptionCreateItem:
    type: object
    required:
    - userId
    - serviceId
    - offerId
    - subscriptionChannel
    - createDate
    properties:
      userId:
        type: string
        example: 552199999999
        description: The identifier of the user to subscribe. 
      serviceId:
        type: integer
        example: 98772320
        description: The Service ID of this subscription. 
      offerId:
        type: integer
        example: 5432
        description: The Offer ID of this subscription.
      subscriptionChannel:
        type: string
        example: WEB
        description: The Acquisition Channel requested the creations of this subscription. Acquisition Channels might take the following values (SMS, WAP, WEB, IVR, USSD, SATPUSH, SIMCARD, APP).
      tags:
        type: array
        items:
          type: string
        example: ["promotion", "foo", "campaign"]
        description: Tags are used to facilitate searches and analysis on the subscription. A typical use case for tags would be to tag the new subscription created with a marketing campaign. 
      createDate:
        type: string
        format: date-time
        example: "2018-01-01T10:10:33.001Z"
        description: DateTime of the subscription create request. 
      transactionId:
        type: string
        example: "1SDJFS-SDJSFS-0080DF"
        description: The transaction ID guarantees that the platform will process only one copy of the request. If the Service Provider had a communication issue in the middle of a request and he wants to repeat the request, the transaction ID will guarantee that the platform will not process that same request twice.
  SubscriptionRenewItem:
    type: object
    required:
    - userId
    - serviceId
    - offerId
    - stepId
    - price
    - period
    - paymentDate
    - nextPaymentDate
    - transactionId
    properties:
      userId:
        type: string
        example: 552199999999
        description: The identifier of the user to renew the subscription.
      serviceId:
        type: integer
        example: 98772320
        description: The identifier of the service.
      offerId:
        type: integer
        example: 5432
        description: The identifier of the offer.
      stepId:
        type: integer
        example: 5430222
      price:
        type: integer 
        description: Price in cents
        example: 199
      period:
        type: integer
        description: Period in seconds
        example: 10080
      paymentDate:
        type: string
        format: date-time
        example: "2018-01-01T10:10:33.001Z"
      nextPaymentDate:
        type: string
        format: date-time
        example: "2018-01-08T10:10:33.001Z"
      transactionId:
        type: string
        example: "1SDJFS-SDJSFS-0080DF"
        description: The transaction ID guarantees that the platform will process only one copy of the request. If the Service Provider had a communication issue in the middle of a request and he wants to repeat the request, the transaction ID will guarantee that the platform will not process that same request twice.
  SubscriptionCancelItem:
    type: object
    required:
    - userId
    - serviceId
    - offerId
    - cancelChannel
    - cancelDate
    - transactionID
    properties:
      userId:
        type: string
        example: 552199999999
        description: The identifier of the user to cancel the subscription.
      serviceId:
        type: integer
        example: 98772320
        description: The identifier of the service in which the user is subscribed.
      offerId:
        type: integer
        example: 5432
        description: The identifier of the offer in which the user is subscribed.
      cancelChannel:
        type: string
        example: CUSTOMER_SERVICE
        description: The Channel where the event was triggered. Channels might take the following values (SMS, WAP, WEB, IVR, USSD, SATPUSH, SIMCARD, APP, SYSTEM, CUSTOMER_SERVICE).
      cancelDate:
        type: string
        format: date-time
        example: "2018-01-14T10:10:33.001Z"
        description: DateTime of the subscription cancel request. 
      transactionId:
        type: string
        example: "1SDJFS-SDJSFS-0080DF"
        description: The transaction ID guarantees that the platform will process only one copy of the request. If the Service Provider had a communication issue in the middle of a request and he wants to repeat the request, the transaction ID will guarantee that the platform will not process that same request twice.
  SubscriptionItemArray:
    type: array
    items:
      $ref: '#/definitions/SubscriptionItem' 
  SubscriptionItem:
    type: object
    required:
    - userId
    - serviceId
    - offerId
    - subscriptionChannel
    - createDate
    - nextPaymentDate
    - cancelChannel
    - cancelDate
    properties:
      subscriptionId:
        type: integer
        example: 54322145522
      userId:
        type: string
        example: 552199999999
        description: The identifier of the subscribed user.
      serviceId:
        type: integer
        example: 98772320
      offerId:
        type: integer
        example: 5432
      subscriptionChannel:
        type: string
        example: WEB
      tags:
        type: array
        items:
          type: string
        example: ["foo", "bar", "campaign"]
      createDate:
        type: string
        format: date-time
        example: "2018-01-01T10:10:33.001Z"
        description: DateTime of the subscription create request. 
      nextPaymentDate:
        type: string
        format: date-time
        example: "2018-01-08T10:10:33.001Z"
        description: DateTime of the next payment. It indicates when the platform will start trying to charge the user.
      cancelChannel:
        type: string
        example: CUSTOMER_SERVICE
        description: The Channel where the event was triggered. Channels might take the following values (SMS, WAP, WEB, IVR, USSD, SATPUSH, SIMCARD, APP, SYSTEM, CUSTOMER_SERVICE).
      cancelDate:
        type: string
        format: date-time
        example: "2018-01-14T10:10:33.001Z"
        description: DateTime of the subscription cancel request. 
  NotificationItem:
    type: object
    required:
    - userId
    - serviceId
    - offerId
    - amountCharged
    - event
    - channel
    - eventDate
    - nextRenewalDate
    - transactionID
    properties:
      userId:
        type: string
        example: 552199999999
        description: The identifier of the user.
      serviceId:
        type: integer
        example: 98772320
        description: The identifier of the service.
      offerId:
        type: integer
        example: 5432
        description: The identifier of the offer.
      amountCharged:
        type: integer
        example: 399
        description: The amount charged dugin the event. The value will be zero for every event that didn't generate any successfull charge. This number is in cents and assumes the use of local currency. Ex. if amountCharged = 399 than it means $3.99.
      event:
        type: string
        example: SUBSCRIBE
      channel:
        type: string
        example: SMS
        description: The Channel where the event was triggered. Channels might take the following values (SMS, WAP, WEB, IVR, USSD, SATPUSH, SIMCARD, APP, SYSTEM, CUSTOMER_SERVICE).
      eventDate:
        type: string
        format: date-time
        example: "2018-01-14T10:10:33.001Z"
        description: DateTime when the event happened.
      nextRenewalDate:
        type: string
        format: date-time
        example: "2018-01-21T10:10:33.001Z"
        description: DateTime of the next payment. It indicates when the platform will start trying to charge the user.
      transactionId:
        type: string
        example: "1SDJFS-SDJSFS-0080DF"
        description: The transaction ID of the notification. The Transaction ID will help guarantee that the service provider will not process more than one copy of the request.
  BillingItem:
    type: object
    required:
    - userId
    - serviceId
    - offerId
    - eventDate
    properties:
      userId:
        type: string
        example: 552199999999
        description: The identifier of the user.
      serviceId:
        type: integer
        example: 98772320
        description: The identifier of the service.
      offerId:
        type: integer
        example: 5432
        description: The identifier of the offer.
      eventDate:
        type: string
        format: date-time
        example: "2018-01-14T10:10:33.001Z"
        description: DateTime of the billing request.
      transactionId:
        type: string
        example: "1SDJFS-SDJSFS-0080DF"
        description: The transaction ID of the notification. The Transaction ID will help guarantee that the service provider will not process more than one copy of the request.
  MoItem:
    type: object
    required:
    - userId
    - serviceId
    - shortCode
    - text
    - eventDate
    properties:
      userId:
        type: string
        example: 552199999999
        description: The identifier of the user who sent the MO.
      serviceId:
        type: integer
        example: 98772320
        description: The identifier of the service associated with the short code.
      shortCode:
        type: integer
        example: 405
        description: The identifier of the short code. The short code is the destination of the MO.
      text:
        type: string
        example: "Lorem ipsum"
        description: Text of the MOT.
      eventDate:
        type: string
        format: date-time
        example: "2018-01-14T10:10:33.001Z"
        description: DateTime when the MO was received by the platform.
  MtItem:
    type: object
    required:
    - userId
    - serviceId
    - shortCode
    - text
    - eventDate
    properties:
      userId:
        type: string
        example: 552199999999
        description: The identifier of the user who will receive the MT.
      serviceId:
        type: integer
        example: 98772320
        description: The identifier of the service.
      shortCode:
        type: integer
        example: 405
        description: The identifier of the short code associated with the service.
      text:
        type: string
        example: "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua"
        description: Text of the MT.
      eventDate:
        type: string
        format: date-time
        example: "2018-01-14T10:10:33.001Z"
        description: DateTime of the MT request.

