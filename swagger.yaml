swagger: '2.0'
info:
  description: >

    ---
    
    # API Reference
        
    The VAS Management Platform, allows the Telecom carrier to control the entire lifecycle of VAS services. The platform allows acquisiton channel providers to create new VAS services subscriptions providing a deep level of control over those subscriptions. It also provides notificationsto service providers enabling them to provide VAS services to the telecom carrier customers in a seamless way. 
    
    All the VAS services are configured in the platform. Each service may be associated with several offers that defines the business rules of the service such as the trial period, billing steps, prices, concession use period, types of payment (carrier billing, credit card, bundles) and the automatic cancellation criteria.
    
    The picture below shows the relationship between the main entities and the main resources of this platform.
    
    * **Service Provider** - The Service Provider is responsible for providing the service for the telecom customer.
    
    
    * **Channel Provider** - The Channel Provider is resposible for a subscription channel and is responsible for selling the service for the service prodiver. Once a customer subscribes for a service through a channel the platform will notify the service provider about the event.
    
    
    * **Subscription** - Handles all the operations regarding a Subscription, such as creation, cancellation or updates on a subscription.
    
    
    * **Micro Billing** - Handles one-time charging requests (also known as Micro Billing).
    
    
    * **Messaging** - Allow Service Providers to send Mobile Terminated messages and to receive Mobile Originated messages.
    

    * **Web Hooks** - The platform send notifications (also known as *Data Syncs*) to the service providers. Those notifications contain information about the event that happened in the platform such as a susbription to a service belonging to the service provider.
    

    ![Image](http://docs.oisdp.mobicare.com.br/img/entities.png)
      
      ---
      
      ## HTTP Status and verbs
      
          
      The VAS Management API is a REST API which has predictable, resource-oriented URLs and uses other HTTP features such as HTTP verbs for each operation, HTTP authentication and HTTP status information to indicate API success or errors.
      
      The API uses HTTP status information to indicate API success or errors. The list below describes the success and error status codes.
      
      * **200** - OK. Request was successfuly processed.
      * **202** - Accepted. The request was accepted and will be processed asynchronously.
      * **400** - The server could not process the request due to a malformed request.
      * **401** - Invalid or expired user credentials. The JWT token is not valid.
      * **402** - User does not have suffient balance to process the request.
      * **403** - The server understood the request but refuses to authorize it. The client should not automatically repeat the request with the same credentials. Ex. The service provider is attempting to manage a subscription from a another service provider.
      * **404** - Not Found. Ex. Subscription Id doesn't exist.
      * **409** - Conflict. The request could not be completed due to a conflict with the current state of the target resource. Ex. The user is already subscribed to the service but in a different offer.
      * **500** - The server encountered an unexpected condition that prevented it from fulfilling the request.
      * **503** - The server is currently unable to handle the request due to a temporary overload, which will likely be alleviated after some delay. Ex. Teh service provider exceeded the agreed requests per second rate.
      
      ---
      
      ## Error Codes
      
      Every time the API returns an error, it will include an Error resource in the body of the response.
      
      ```
        {
          message: "The user is already subscribed to the service",
          code: "user_already_subscribed"
        }
      ```
      
      The list below describes the codes returned in the Error resource. Those codes are intended to provide a further explanation to the error returned.
      
      * **service_not_found** - The service doesn't exist or doesn't belong to the service provider.
      * **offer_not_found** - The offer doesn't exist or doesn't belong to the service.
      * **user_not_from_carrier** - The user was not found in the carrier database.
      * **blacklisted_user** - User belongs to blacklist and cannot subscribe any service.
      * **user_already_subscribed** - The user is already subscribed to the service.
      * **insufficient_balance** - The user has insufficient balance for this operation.
      * **user_cannot_subscribe_offer** - The user cannot subscribe the service due to a service or offer constraints. Ex. Prepaid user cannot subscribe post-paid offer.
      * **too_many_requests** - The API client exceed the number of allowed requests during this period.
      
      ---
      
      ## Versioning
      
      The VAS Managemente API is versioned. Whenever there are backwards-incompatible changes to the API, a new version will be released.
      
      To set the API version on a specific request, just send the version number in the pase path.
      
      Example: `https://api.mobicare.com.br/v1/any/path/resource  `  
      
      # Service Flow
      
      ## SMS Subscription Flow
      
      The SMS subscription flow guarantees that the user has given a double opt-in before subscribing for the service. When the user sends an SMS with a subscription command, the platform identifies the service by searching for the keyword and the shortcode and sends the double opt-in SMS to the user. Once the user sends the SMS confirmation keyword to the platform, the subscription operation is completed.
      For every new subscription the Service Provider is notified about the new event that ocurred.  The picture below ilustrates the SMS subscription flow.
      
      ![Image](http://docs.oisdp.mobicare.com.br/img/sms_subs_flow.png)
      
      ## Consent Page Subscription Flow
      
      The SMS subscription flow ensures that all users coming from non-whitelabel web channels access a consent page prior to subscribing to the service. After the consent page is presented and the user gives an opt-in, the subscription is confirmed and the platform notifies the service provider about the new subscription event.
      
      ![Image](http://docs.oisdp.mobicare.com.br/img/consent_subscription_flow.png)
      
      ## Channel Provider Subscription Flow
      
      Channel providers have access to an API where they can subcribe for a service directly in the platform. In this case the channel provider is responsible for the double opt-in control in its specific channel. Once the subscription is completed the service provider will be notified about the new event that ocurred.
      
      ![Image](http://docs.oisdp.mobicare.com.br/img/channel_subscription_flow.png)
      
  version: 1.0.0
  title: VAS Management API
  x-logo:
      url: "http://docs.oisdp.mobicare.com.br/img/logo.png"
  contact:
    email: contact@mobicare.com.br
schemes:
  - https
consumes:
  - application/json
produces:
  - application/json
securityDefinitions:
  Bearer:
    type: apiKey
    description: >
      The clients of the API need to authenticate each request by including a key in every API request. The API keys are available in the Management Console.
      
      The API uses JWT together with HTTP Bearer Authentication to authenticate a service or a channel provider. The JWT token carry priviledges for the provider and should not be publicly shared.
      
      Below is an example of how the JWT token should be sent in the HTTP request.
      
      `Authorization: Bearer <token>`

    name: Authorization
    in: header

# tags are used for organizing operations
tags:
- name: channel providers
  description: Operations available to channel providers. The Channel Provider is resposible for a subscription channel and is responsible for selling the service from the service prodiver. Once a user subscribes a service through a channel the service provider will be notified about that event.
- name: service providers
  description: Operations available to service providers. The Service Provider is responsible for providing the service for the user.
- name: notification
  description: Notifications sent to the service providers. The platform send notifications (also known as *Data Syncs*) to the service providers. Those notifications contains information about the event that happened in the platform such as a subription in a service that belongs to the service provider.
  
paths:
  /subscription:
    post:
      tags:
      - channel providers
      summary: Create a subscription
      operationId: addSubscription
      description: Creates a new subscription for a given User Id on a given Offer Id. The Create Subscription operation is usually available for channel providers. Service providers will not be able to use this API, however they will be notified whenever this operation is completed.
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: subscriptionItem
        description: Subscription item to add
        schema:
          $ref: '#/definitions/SubscriptionCreateItem'
      
      - in: header
        name: X-Transaction-ID
        type: string
        required: false
        description: The transaction ID guarantees that the platform will process only one copy of the request. If the API client tries to resend the request with the transaction ID, the platform will not process that same request again.
      responses:
        200:
          description: subscription succesfully created.
          schema:
            $ref: '#/definitions/MessageItem'
        400:
          description: invalid input, object invalid
          schema:
            $ref: '#/definitions/ErrorItem'
        401:
          description: invalid or expired user credentials
          schema:
            $ref: '#/definitions/ErrorItem'
        403:
          description: service does not belong to the service provider
          schema:
            $ref: '#/definitions/ErrorItem'
        409:
          description: user is already subscribed to the provider's service
          schema:
            $ref: '#/definitions/ErrorItem'
        500:
          description: unkown error
          schema:
            $ref: '#/definitions/ErrorItem'
        503:
          description: number of transactions per second exceed
          schema:
            $ref: '#/definitions/ErrorItem'
    get:
      tags:
      - channel providers
      - service providers
      summary: List subscriptions
      operationId: listSubscriptions
      description: Retrieve a list of subscriptions for a given User Id. A Service Id might be also informed as a filter.
      produces:
      - application/json
      parameters:
      - in: query
        name: userId
        type: string
        required: true
        description: User Id of the subscriptions to retrieve 
      - in: query
        name: serviceId
        type: integer
        required: false
        description: Service Id of the subscriptions to retrieve
      responses:
        200:
          description: returns a list of subscriptions
          schema:
            $ref: '#/definitions/SubscriptionItemArray'
        400:
          description: invalid input, object invalid
          schema:
            $ref: '#/definitions/ErrorItem'
        401:
          description: invalid or expired user credentials
          schema:
            $ref: '#/definitions/ErrorItem'
        403:
          description: service does not belong to the service provider
          schema:
            $ref: '#/definitions/ErrorItem'
        409:
          description: user is already subscribed to the provider's service
          schema:
            $ref: '#/definitions/ErrorItem'
        500:
          description: unkown error
          schema:
            $ref: '#/definitions/ErrorItem'
        503:
          description: number of transactions per second exceed
          schema:
            $ref: '#/definitions/ErrorItem'
  /subscription/{subscriptionId}:
    get:
      tags:
      - service providers
      summary: Find subscription
      operationId: findSubscription
      description: Find a subscription for a given Subscription Id.
      produces:
      - application/json
      parameters:
      - name: subscriptionId
        in: path
        description: The identifier of the subscription.
        required: true
        type: integer
      responses:
        200:
          description: returns the subscription
          schema:
            $ref: '#/definitions/SubscriptionItem'
        400:
          description: invalid input, object invalid
          schema:
            $ref: '#/definitions/ErrorItem'
        401:
          description: invalid or expired user credentials
          schema:
            $ref: '#/definitions/ErrorItem'
        403:
          description: service does not belong to the service provider
          schema:
            $ref: '#/definitions/ErrorItem'
        404:
          description: subscription wasn't found
          schema:
            $ref: '#/definitions/ErrorItem'
        409:
          description: user is already subscribed to the provider's service
          schema:
            $ref: '#/definitions/ErrorItem'
        500:
          description: unkown error
          schema:
            $ref: '#/definitions/ErrorItem'
        503:
          description: number of transactions per second exceed
          schema:
            $ref: '#/definitions/ErrorItem'
    delete:
      tags:
      - channel providers
      - service providers
      summary: Cancel a subscription
      operationId: cancelSubscription
      description: Cancel an existing subscription. The subscription is terminated immediately and the user will not be charged again for the subscription.
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - name: subscriptionId
        in: path
        description: The identifier of the subscription to be cancelled.
        required: true
        type: integer
      - in: body
        name: subscriptionItem
        description: Subscription to cancel
        schema:
          $ref: '#/definitions/SubscriptionCancelItem'
      - in: header
        name: X-Transaction-ID
        type: string
        required: false
        description: The transaction ID guarantees that the platform will process only one copy of the request. If the API client tries to resend the requeest with the transaction ID, the platform will not process that same request again.
      responses:
        202:
          description: subscription cancel request accepted, a callback will be sent to the provider with the result of this operation.
          schema:
            $ref: '#/definitions/MessageItem'
        400:
          description: invalid input, object invalid
          schema:
            $ref: '#/definitions/ErrorItem'
        401:
          description: invalid or expired user credentials
          schema:
            $ref: '#/definitions/ErrorItem'
        403:
          description: service does not belong to the service provider
          schema:
            $ref: '#/definitions/ErrorItem'
        404:
          description: subscription Id doesn't exist
          schema:
            $ref: '#/definitions/ErrorItem'
        409:
          description: user is not subscribed to the service
          schema:
            $ref: '#/definitions/ErrorItem'
        500:
          description: unkown error
          schema:
            $ref: '#/definitions/ErrorItem'
        503:
          description: number of transactions per second exceed
          schema:
            $ref: '#/definitions/ErrorItem'
  /charge:
    post:
      tags:
      - service providers
      summary: Charges user (one-time billing).
      operationId: charge
      description: Charges users for one-time purchases. The access to this operation is limited to a few service providers who have special requirements for charging outside the context of the recurring billing. 
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: billingItem
        description: Information for the one time charge.
        schema:
          $ref: '#/definitions/BillingItem'
      - in: header
        name: X-Transaction-ID
        type: string
        required: false
        description: The transaction ID guarantees that the platform will process only one copy of the request. If the API client tries to resend the requeest with the transaction ID, the platform will not process that same request again.
      responses:
        200:
          description: user was succesfully charged
          schema:
            $ref: '#/definitions/MessageItem'
        400:
          description: invalid input, object invalid
          schema:
            $ref: '#/definitions/ErrorItem'
        401:
          description: invalid or expired  credentials
          schema:
            $ref: '#/definitions/ErrorItem'
        402:
          description: user does not have enough balance
          schema:
            $ref: '#/definitions/ErrorItem'
        403:
          description: service does not belong to the service provider
          schema:
            $ref: '#/definitions/ErrorItem'
        500:
          description: unkown error
          schema:
            $ref: '#/definitions/ErrorItem'
        503:
          description: number of transactions per second exceed
          schema:
            $ref: '#/definitions/ErrorItem'
  /notification/{subscriptionId}:
    post:
      tags:
      - notification
      summary: Notify service provider
      operationId: notifyEvent
      description: Notifications sent to the service provider containing the data related to the event that occurred on the platform (Ex. Trial, Subscription, Cancellation, Renewal, Suspension, Reactivation). Those events notifications contain all relevant data of that event, for example itr every subscription or renewal event it informs the next renewal period, until then the service provider needs to grant  access to the service to that specific user.
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - name: subscriptionId
        in: path
        description: Subscription Id
        required: true
        type: integer
      - in: body
        name: notificationItem
        description: Notification containing the information about an event regarding the subscription
        schema:
          $ref: '#/definitions/NotificationItem'
      - in: header
        name: X-Transaction-ID
        type: string
        required: false
        description: The transaction ID guarantees that the platform will process only one copy of the request. If the API client tries to resend the requeest with the transaction ID, the platform will not process that same request again.
      responses:
        200:
          description: service provider succesfully processed the notification
          schema:
            $ref: '#/definitions/MessageItem'
        400:
          description: invalid input, object invalid
          schema:
            $ref: '#/definitions/ErrorItem'
        401:
          description: invalid or expired  credentials
          schema:
            $ref: '#/definitions/ErrorItem'
        403:
          description: service does not belong to the service provider
          schema:
            $ref: '#/definitions/ErrorItem'
        500:
          description: unkown error
          schema:
            $ref: '#/definitions/ErrorItem'
        503:
          description: number of transactions per second exceed
          schema:
            $ref: '#/definitions/ErrorItem'
  /messaging/mt:
    post:
      tags:
      - service providers
      summary: Send MT message
      operationId: mtReceive
      description: API responsible for sending an Mobile Terminated message to a user. Only service providers who have specific needs for sending SMS messages will have access to that API. Subscription, cancellation and help commands will be intercepted and handled by the platform. The platform is also responsible for sending automatic customer notifications using SMS, those notifications are related to events that has changed the state of a subscription (ex. Subscription, Trial, Cancellation, etc.).
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: moItem
        description: Notification containing the information about a mobile terminated message
        schema:
          $ref: '#/definitions/MtItem'
      - in: header
        name: X-Transaction-ID
        type: string
        required: false
        description: The transaction ID guarantees that the platform will process only one copy of the request. If the API client tries to resend the request with the transaction ID, the platform will not process that same request again.
      responses:
        200:
          description: succesfully processed the notification
          schema:
            $ref: '#/definitions/MessageItem'
        400:
          description: invalid input, object invalid
          schema:
            $ref: '#/definitions/ErrorItem'
        401:
          description: invalid or expired  credentials
          schema:
            $ref: '#/definitions/ErrorItem'
        403:
          description: service does not belong to the service provider
          schema:
            $ref: '#/definitions/ErrorItem'
        500:
          description: unkown error
          schema:
            $ref: '#/definitions/ErrorItem'
        503:
          description: number of transactions per second exceed
          schema:
            $ref: '#/definitions/ErrorItem'
  /messaging/mo:
    post:
      tags:
      - notification
      summary: Receive MO message
      operationId: moReceive
      description: Notification sent to the service provider whenever an MO is received on the platform and is not intercepted and handled by the platform. For example, subscription and cancel commands are intercepted by the platform and doesn't trigger any notification to the service provider. MO's relate to engagement are typically sent to the service providers.
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: moItem
        description: Notification containing the information about a mobile originated message
        schema:
          $ref: '#/definitions/MoItem'
      - in: header
        name: X-Transaction-ID
        type: string
        required: false
        description: The transaction ID guarantees that the platform will process only one copy of the request. If the API client tries to resend the requeest with the transaction ID, the platform will not process that same request again.
      responses:
        200:
          description: service provider succesfully processed the notification
          schema:
            $ref: '#/definitions/MessageItem'
        400:
          description: invalid input, object invalid
          schema:
            $ref: '#/definitions/ErrorItem'
        401:
          description: invalid or expired  credentials
          schema:
            $ref: '#/definitions/ErrorItem'
        403:
          description: service does not belong to the service provider
          schema:
            $ref: '#/definitions/ErrorItem'
        500:
          description: unkown error
          schema:
            $ref: '#/definitions/ErrorItem'
        503:
          description: number of transactions per second exceed
          schema:
            $ref: '#/definitions/ErrorItem'
definitions:
  SubscriptionCreateItem:
    type: object
    required:
    - userId
    - serviceId
    - offerId
    - subscriptionChannel
    properties:
      userId:
        type: string
        example: 552199999999
        description: The identifier of the user. 
      serviceId:
        type: integer
        example: 98772320
        description: The identifier of the service. 
      offerId:
        type: integer
        example: 5432
        description: The identifier of the offer.
      subscriptionChannel:
        type: string
        example: WEB
        description: The acquisition channel that requested the creations of this subscription. Acquisition Channels might take the following values (SMS, WAP, WEB, IVR, USSD, SATPUSH, SIMCARD, APP).
      subscriptionCampaign:
        type: string
        example: campaign123
        description: The marketing campaign that generated the subscription.
      tags:
        type: array
        items:
          type: string
        example: ["promotion", "foo"]
        description: Tags are used to facilitate searches and analysis on the subscription.
  SubscriptionRenewItem:
    type: object
    required:
    - userId
    - serviceId
    - offerId
    - stepId
    - price
    - period
    - paymentDate
    - nextPaymentDate
    properties:
      userId:
        type: string
        example: 552199999999
        description: The identifier of the user to renew the subscription.
      serviceId:
        type: integer
        example: 98772320
        description: The identifier of the service.
      offerId:
        type: integer
        example: 5432
        description: The identifier of the offer.
      stepId:
        type: integer
        example: 5430222
      amountCharged:
        type: integer 
        description: The amount charged in cents
        example: 199
      period:
        type: integer
        description: Period in seconds
        example: 10080
      paymentDate:
        type: string
        format: date-time
        example: "2018-01-01T10:10:33.001Z"
      nextPaymentDate:
        type: string
        format: date-time
        example: "2018-01-08T10:10:33.001Z"
  SubscriptionCancelItem:
    type: object
    required:
    - userId
    - serviceId
    - offerId
    - cancelChannel
    - cancelDate
    properties:
      userId:
        type: string
        example: 552199999999
        description: The identifier of the user to cancel the subscription.
      serviceId:
        type: integer
        example: 98772320
        description: The identifier of the service in which the user is subscribed.
      offerId:
        type: integer
        example: 5432
        description: The identifier of the offer in which the user is subscribed.
      cancelChannel:
        type: string
        example: CUSTOMER_SERVICE
        description: The Channel where the event was triggered. Channels might take the following values (SMS, WAP, WEB, IVR, USSD, SATPUSH, SIMCARD, APP, SYSTEM, CUSTOMER_SERVICE).
      cancelDate:
        type: string
        format: date-time
        example: "2018-01-14T10:10:33.001Z"
        description: DateTime of the subscription cancel request.
        
  SubscriptionItemArray:
    type: array
    items:
      $ref: '#/definitions/SubscriptionItem' 
  SubscriptionItem:
    type: object
    required:
    - userId
    - serviceId
    - offerId
    - subscriptionId
    - subscriptionChannel
    - createDate
    - nextPaymentDate
    - cancelChannel
    - cancelDate
    properties:
      userId:
        type: string
        example: 552199999999
        description: The identifier of the subscribed user.
      serviceId:
        type: integer
        example: 98772320
        description: The identifier of the service.
      offerId:
        type: integer
        example: 5432
        description: The identifier of the offer.
      subscriptionId:
        type: string
        example: e1cccd0d-62e8-4996-82f4-01015e5bfa3a
        description: The identifier of the subscription.
      subscriptionChannel:
        type: string
        example: WEB
      tags:
        type: array
        items:
          type: string
        example: ["foo", "bar", "campaign"]
      createDate:
        type: string
        format: date-time
        example: "2018-01-01T10:10:33.001Z"
        description: DateTime of the subscription create request. 
      nextPaymentDate:
        type: string
        format: date-time
        example: "2018-01-08T10:10:33.001Z"
        description: DateTime of the next payment. It indicates when the platform will start trying to charge the user.
      cancelChannel:
        type: string
        example: CUSTOMER_SERVICE
        description: The Channel where the event was triggered. Channels might take the following values (SMS, WAP, WEB, IVR, USSD, SATPUSH, SIMCARD, APP, SYSTEM, CUSTOMER_SERVICE).
      cancelDate:
        type: string
        format: date-time
        example: "2018-01-14T10:10:33.001Z"
        description: DateTime of the subscription cancel request. 
  NotificationItem:
    type: object
    required:
    - userId
    - serviceId
    - offerId
    - event
    - channel
    - eventDate
    properties:
      userId:
        type: string
        example: 552199999999
        description: The identifier of the user.
      serviceId:
        type: integer
        example: 98772320
        description: The identifier of the service.
      offerId:
        type: integer
        example: 5432
        description: The identifier of the offer.
      amountCharged:
        type: integer
        example: 399
        description: The amount charged. The value will be zero for every event that didn't generate any successfull charge. This number is in cents and assumes the use of local currency. Ex. if amountCharged = 399 than it means $3.99.
      event:
        type: string
        example: SUBSCRIBE
        description: A code describing the event that occurred in the platform. Ex. SUBSCRIBE, RENEW and CANCEL.
      eventDetail:
        type: string
        example: CHARGE_SUCCESS
        description: A code providing more detail on the event. Ex. event- SUBSCRIBE + detail- NO_CREDIT -> It means that a prepaid user subscribed for the service but didn't have enough balance to pay for the service. Other types of details are PAYMENT_FAILED, NO_CREDIT, TRIAL, BUNDLE. The event detail CHARGE_SUCCESS is the only event that indicates that the user was charged for the event.
      channel:
        type: string
        example: SMS
        description: The Channel where the event was triggered. Channels might take the following values (SMS, WAP, WEB, IVR, USSD, SATPUSH, SIMCARD, APP, SYSTEM, CUSTOMER_SERVICE).
      eventDate:
        type: string
        format: date-time
        example: "2018-01-14T10:10:33.001Z"
        description: DateTime when the event happened.
      nextRenewalDate:
        type: string
        format: date-time
        example: "2018-01-21T10:10:33.001Z"
        description: DateTime of the next payment. It indicates when the platform will start trying to charge the user.
  BillingItem:
    type: object
    required:
    - userId
    - serviceId
    - offerId
    - eventDate
    properties:
      userId:
        type: string
        example: 552199999999
        description: The identifier of the user.
      serviceId:
        type: integer
        example: 98772320
        description: The identifier of the service.
      offerId:
        type: integer
        example: 5432
        description: The identifier of the offer.
      eventDate:
        type: string
        format: date-time
        example: "2018-01-14T10:10:33.001Z"
        description: DateTime of the billing request.
  MoItem:
    type: object
    required:
    - userId
    - serviceId
    - shortCode
    - text
    - eventDate
    properties:
      userId:
        type: string
        example: 552199999999
        description: The identifier of the user who sent the MO.
      serviceId:
        type: integer
        example: 98772320
        description: The identifier of the service associated with the short code.
      shortCode:
        type: integer
        example: 405
        description: The identifier of the short code. The short code is the destination of the MO.
      text:
        type: string
        example: "Lorem ipsum"
        description: Text of the MOT.
      eventDate:
        type: string
        format: date-time
        example: "2018-01-14T10:10:33.001Z"
        description: DateTime when the MO was received by the platform.
  MtItem:
    type: object
    required:
    - userId
    - serviceId
    - shortCode
    - text
    - eventDate
    properties:
      userId:
        type: string
        example: 552199999999
        description: The identifier of the user who will receive the MT.
      serviceId:
        type: integer
        example: 98772320
        description: The identifier of the service.
      shortCode:
        type: integer
        example: 405
        description: The identifier of the short code associated with the service.
      text:
        type: string
        example: "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua"
        description: Text of the MT.
      eventDate:
        type: string
        format: date-time
        example: "2018-01-14T10:10:33.001Z"
        description: DateTime of the MT request.
  ErrorItem:
    type: object
    required:
    - message
    - code
    properties:
      message:
        type: string
        example: "Lorem ipsum dolor sit amet"
        description: A message providing more details about the error.
      code:
        type: string
        example: "error_code"
        description: A code related to the specfic error that occurred.
  MessageItem:
    type: object
    required:
    - message
    properties:
      message:
        type: string
        example: "Lorem ipsum dolor sit amet"
        description: A message providing more details about the successful operation.

host: sdp.mobicare.com.br
basePath: /v1
